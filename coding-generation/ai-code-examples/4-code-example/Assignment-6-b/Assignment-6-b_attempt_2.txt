import numpy as np
import matplotlib.pyplot as plt

# Function that gives the Monte Carlo estimate for pi
def monte_carlo_pi(n_points):
    x = np.random.uniform(-1, 1, n_points)
    y = np.random.uniform(-1, 1, n_points)
    inside_circle = x**2 + y**2 <= 1
    pi_estimate = 4 * np.sum(inside_circle) / n_points
    return pi_estimate

# Function that gives the Monte Carlo estimate for the volume of a unit ball in dim dimensions
def monte_carlo_volume(dim, n_points):
    points = np.random.uniform(-1, 1, (n_points, dim))
    inside_ball = np.sum(points**2, axis=1) <= 1
    volume_estimate = (2**dim) * np.sum(inside_ball) / n_points
    return volume_estimate

# Simulate the integration error showing its scaling
def integration_error(dim, n_points_list):
    results = np.zeros((dim + 1, len(n_points_list)))

    for d in range(1, dim + 1):
        for i, n_points in enumerate(n_points_list):
            volumes = [monte_carlo_volume(d, n_points) for _ in range(100)]
            errors = np.abs(volumes - np.pi ** (d / 2) / (2 ** (d - 1) * factorial(d // 2)))  # True value for volume of unit sphere
            results[d-1, i] = np.mean(errors)

    results[-1] = 1 / np.sqrt(n_points_list)
    
    return results

# Function to compute the factorial
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n-1)

# Function to generate sample according to the given distribution
def f(x):
    return 1 + 2 / (1 + x**2) + np.cos(np.sqrt(3 * x))**2

def genSample(n_samples):
    x = np.linspace(0, 10, 1000)
    y = f(x)
    y_max = np.max(y)
    
    samples = []
    while len(samples) < n_samples:
        x_val = np.random.uniform(0, 10)
        y_val = np.random.uniform(0, y_max)
        if y_val < f(x_val):
            samples.append(x_val)
    
    return np.array(samples)

# Generate the distribution and plot it
n_samples = 10000
samples = genSample(n_samples)

plt.hist(samples, bins=50, density=True, alpha=0.6, color='g')
x = np.linspace(0, 10, 1000)
plt.plot(x, f(x) / np.trapz(f(x), x), 'r-', lw=2) 
plt.title('Distribution of Values Generated by genSample')
plt.xlabel('x')
plt.ylabel('Probability Density')
plt.show()