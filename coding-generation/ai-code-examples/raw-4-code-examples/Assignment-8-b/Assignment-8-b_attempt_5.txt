import numpy as np
import matplotlib.pyplot as plt

class Walker:
    def __init__(self, ndim=1, step_size=1):
        self.ndim = ndim
        self.step_size = step_size
        self.pos = np.zeros(ndim)
        self.steps = self.genSteps()

    def genSteps(self):
        steps = []
        for i in range(self.ndim):
            for sign in [-1, 1]:
                step = np.zeros(self.ndim)
                step[i] = sign * self.step_size
                steps.append(step)
        return steps

    def pickStep(self):
        return self.steps[np.random.choice(len(self.steps))]

    def doSteps(self, n):
        trajectory = np.zeros((n + 1, self.ndim))
        for i in range(1, n + 1):
            self.pos += self.pickStep()
            trajectory[i] = self.pos
        return trajectory

def simulate(walkers, steps, ndim):
    positions = np.zeros((walkers, steps + 1, ndim))
    for i in range(walkers):
        walker = Walker(ndim=ndim)
        positions[i] = walker.doSteps(steps)
    return positions

dimensions = [1, 2, 3, 4]
n_walkers = 400
n_steps = 100

plt.figure(figsize=(10, 6))

for ndim in dimensions:
    positions = simulate(n_walkers, n_steps, ndim)
    final_positions = positions[:, -1]
    squared_distances = np.sum(final_positions**2, axis=1)
    avg_squared_distance = np.mean(squared_distances)
    steps = np.arange(n_steps + 1)
    plt.plot(steps, np.full(steps.shape, avg_squared_distance), label=f'Dimension {ndim}')

plt.title('Average Squared Distance Scaling with Number of Steps')
plt.xlabel('Number of Steps')
plt.ylabel('Average Squared Distance')
plt.legend()
plt.show()