import numpy as np
import matplotlib.pyplot as plt

def integrate(n_points, dim):
    points = np.random.uniform(-1, 1, (n_points, dim))
    norm = np.linalg.norm(points, axis=1)
    return np.mean(norm <= 1) * 2**dim

dimensions = [2, 5, 10, 20, 50]
n_points = np.logspace(1, 4, 100, dtype=int)
errors = []

for dim in dimensions:
    dim_errors = []
    for n in n_points:
        estimate = integrate(n, dim)
        error = np.abs(estimate - np.pi) / np.pi
        dim_errors.append(error)
    errors.append(dim_errors)

plt.figure(figsize=(10, 6))
for i, dim in enumerate(dimensions):
    plt.plot(n_points, errors[i], label=f'dimension={dim}')

plt.xscale('log')
plt.yscale('log')
plt.xlabel('Number of Points')
plt.ylabel('Relative Error')
plt.title('Monte Carlo Integration Error Scaling in Different Dimensions')
plt.legend()
plt.show()