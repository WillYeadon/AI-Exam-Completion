import numpy as np
import matplotlib.pyplot as plt

# Function to define the Banana Function
def banana(r):
    x, y = r
    return (1 - x)**2 + 100 * (y - x**2)**2

# Function to define the gradient of the Banana Function
def banana_grad(r):
    x, y = r
    df_dx = -2 * (1 - x) - 400 * x * (y - x**2)
    df_dy = 200 * (y - x**2)
    return np.array([df_dx, df_dy])

# Function to implement gradient descent
def gradientDescent(df, r0, eta, n_steps):
    r = r0
    path = [r]
    for _ in range(n_steps):
        r = r - eta * df(r)
        path.append(r)
    return np.array(path)

# Grid for plotting the banana function
x = np.linspace(-2, 2, 400)
y = np.linspace(-1, 3, 400)
X, Y = np.meshgrid(x, y)
Z = banana((X, Y))

# Starting point
r0 = np.array([0.2, 1])

# Step sizes to explore
etas = [0.001, 0.0001, 0.0005]

# Initialize the plot
plt.figure(figsize=(10, 6))
im = plt.imshow(Z, extent=[-2, 2, -1, 3], origin='lower', cmap=plt.cm.gray, alpha=0.5)

# Plotting trajectories for each eta
for eta in etas:
    path = gradientDescent(banana_grad, r0, eta, 1500)
    plt.plot(path[:, 0], path[:, 1], label=f'eta = {eta}')

# Adding title, labels, and legend
plt.title('Gradient Descent Trajectories on the Banana Function')
plt.xlabel('x')
plt.ylabel('y')
plt.colorbar(im, label='Function Value')
plt.legend()
plt.show()