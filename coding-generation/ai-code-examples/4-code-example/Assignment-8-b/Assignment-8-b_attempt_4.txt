import numpy as np
import matplotlib.pyplot as plt

# Walker class
class Walker:
    def __init__(self, D, s=1):
        self.ndim = D
        self.s = s
        self.pos = np.zeros(D)
        self.steps = self.generate_steps()

    def generate_steps(self):
        steps = []
        for i in range(self.ndim):
            step = np.zeros(self.ndim)
            step[i] = self.s
            steps.append(step.copy())
            step[i] = -self.s
            steps.append(step.copy())
        return steps

    def pickStep(self):
        return self.steps[np.random.randint(0, len(self.steps))]

    def doSteps(self, n):
        trajectory = np.zeros((n+1, self.ndim))
        for i in range(1, n+1):
            self.pos += self.pickStep()
            trajectory[i] = self.pos
        return trajectory

# Constants
dimensions = [1, 2, 3, 4]
num_walkers = 400
num_steps = 100

# Initialize results storage
avg_squared_distances = {D: [] for D in dimensions}

# Simulate walkers and calculate average squared distances
for D in dimensions:
    for _ in range(num_walkers):
        walker = Walker(D)
        trajectory = walker.doSteps(num_steps)
        squared_distances = np.sum(trajectory**2, axis=1)
        avg_squared_distances[D].append(squared_distances)
        
    avg_squared_distances[D] = np.mean(avg_squared_distances[D], axis=0)

# Plotting results
plt.figure(figsize=(10, 6))
for D in dimensions:
    plt.plot(range(num_steps + 1), avg_squared_distances[D], label=f'D = {D}')

plt.title('Average Squared Distance vs. Number of Steps')
plt.xlabel('Number of Steps')
plt.ylabel('Average Squared Distance')
plt.legend()
plt.show()