import numpy as np
import matplotlib.pyplot as plt

# Function to estimate Pi using Monte Carlo method
def findPi(n_points):
    x = np.random.rand(n_points)
    y = np.random.rand(n_points)
    
    inside_circle = (x**2 + y**2) < 1
    pi_estimate = 4 * np.sum(inside_circle) / n_points
    
    return pi_estimate

# Function to estimate the volume of a unit ball in dim dimensions using Monte Carlo method
def integrate(dim, n_points):
    random_points = np.random.uniform(low=-1, high=1, size=(n_points, dim))
    inside_ball = np.sum(random_points**2, axis=1) < 1
    ball_volume_estimate = 2**dim * np.sum(inside_ball) / n_points
    
    return ball_volume_estimate

# Initializing variables for the number of points and dimensions
n_points = np.logspace(2, 6, num=15, dtype=int)
dimensions = np.arange(1, 21, 1)

# Initializing the results array
results = np.zeros((len(n_points), len(dimensions) + 1)) # Additional column for theoretical scaling

# Loop over dimensions
for i, dim in enumerate(dimensions):
    for j, n in enumerate(n_points):
        # Monte Carlo estimation of the volume of the unit ball
        estimate = integrate(dim, n)
        results[j, i] = estimate
    
    # Theoretical scaling of the error (1/sqrt(N))
    results[-1, i] = 2**dim / np.sqrt(n_points[-1])

# Function to generate a sample of values distributed according to the given probability density function
def genSample(npts):
    x = np.linspace(0, 10, npts)
    f_x = (1 + 2/(1+x**2) + np.cos(np.sqrt(3*x))**2)
    prob_density = f_x / np.trapz(f_x, x)
    
    sample = np.random.choice(x, size=npts, p=prob_density)
    
    return sample

# Plot to show the distribution of values generated according to the given probability density function
sample = genSample(10000)
plt.hist(sample, bins=50, density=True, alpha=0.7)
plt.title('Distribution of Values Generated by Probability Density Function')
plt.xlabel('x values')
plt.ylabel('Density')
plt.show()