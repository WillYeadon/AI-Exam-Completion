import numpy as np
import matplotlib.pyplot as plt

def findPi(n_points):
    points_inside_circle = 0
    for _ in range(n_points):
        x, y = np.random.uniform(-1, 1, 2)
        if x**2 + y**2 <= 1:
            points_inside_circle += 1
    pi_estimate = (points_inside_circle / n_points) * 4
    return pi_estimate

def integrate(dim, n_points):
    points_inside_ball = 0
    for _ in range(n_points):
        point = np.random.uniform(-1, 1, dim)
        if np.sum(point**2) <= 1:
            points_inside_ball += 1
    volume_estimate = (points_inside_ball / n_points) * (2**dim)
    return volume_estimate

#::: Task :::

def compute_error_scaling(dimensions, n_points_list):
    results = {}
    
    for dim in dimensions:
        errors = []
        for n_points in n_points_list:
            estimated_volume = integrate(dim, n_points)
            
            if dim == 2:
                analytical_volume = np.pi
            elif dim == 3:
                analytical_volume = 4/3 * np.pi
            else:
                analytical_volume = np.pi**(dim/2) / np.math.gamma(dim/2 + 1)
                
            error = np.abs(estimated_volume - analytical_volume)
            errors.append(error)
        
        results[dim] = errors

    return results

# Dimensions and number of points to test
dimensions = [2, 3, 4, 5, 6]
n_points_list = [10**i for i in range(1, 7)]

# Compute errors for each dimension
results = compute_error_scaling(dimensions, n_points_list)

# Plot the results
plt.figure(figsize=(10, 6))
for dim in dimensions:
    errors = results[dim]
    plt.plot(n_points_list, errors, label=f'{dim} dimensions')

plt.xscale('log')
plt.yscale('log')
plt.xlabel('Number of Points (N)')
plt.ylabel('Integration Error')
plt.title('Integration Error Scaling in Different Dimensions')
plt.legend()
plt.grid(True, which="both", ls="--")
plt.show()