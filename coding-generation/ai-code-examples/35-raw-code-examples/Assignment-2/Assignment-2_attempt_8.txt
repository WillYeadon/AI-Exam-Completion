import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return x**2 * np.cos(2*x)

def g(x):
    return 0.5*x**2 * np.sin(2*x) + 0.25*np.cos(2*x)

def integrate_f(x_min, x_max):
    return g(x_max) - g(x_min)

def simpsons_rule(f, x_min, x_max, N):
    h = (x_max - x_min) / N
    x = np.linspace(x_min, x_max, N+1)
    y = f(x)
    return h/3 * np.sum(y[0:-1:2] + 4*y[1::2] + y[2::2])

# Analytical result
analytical_result = integrate_f(0, np.pi)

# Numerical results
N_values = np.arange(10, 1000, 10)
numerical_results = [simpsons_rule(f, 0, np.pi, N) for N in N_values]

# Calculate fractional error
fractional_error = np.abs((numerical_results - analytical_result) / analytical_result)

# Plot
plt.figure(figsize=(10, 6))
plt.loglog(N_values, fractional_error, marker='o', color='b', linestyle='-', linewidth=2, markersize=6)
plt.title('Fractional Error in Numerical Integration using Simpson\'s Rule')
plt.xlabel('Number of Panels (N)')
plt.ylabel('Fractional Error')
plt.grid(True)
plt.show()