import matplotlib.pyplot as plt
import numpy as np

def f(x):
    return x**3 - x - 1

def df(x):
    return 3*x**2 - 1

def newton_raphson(x0, tol=1e-10, max_iter=100):
    errors = []
    for _ in range(max_iter):
        f_value = f(x0)
        df_value = df(x0)
        new_x = x0 - f_value / df_value
        error = abs(new_x - x0)
        errors.append(error)
        if error < tol:
            break
        x0 = new_x
    return errors

def bisect(a, b, tol=1e-10, max_iter=100):
    errors = []
    for _ in range(max_iter):
        c = (a + b) / 2
        error = abs(f(c))
        errors.append(error)
        if error < tol or (b - a) / 2 < tol:
            break
        if f(a) * f(c) < 0:
            b = c
        else:
            a = c
    return errors

def secant(x0, x1, tol=1e-10, max_iter=100):
    errors = []
    for _ in range(max_iter):
        f_x0 = f(x0)
        f_x1 = f(x1)
        if abs(f_x0 - f_x1) < tol:
            break
        new_x = x1 - f_x1 * (x1 - x0) / (f_x1 - f_x0)
        error = abs(new_x - x1)
        errors.append(error)
        if error < tol:
            break
        x0, x1 = x1, new_x
    return errors

newton_errors = newton_raphson(1.0)
bisect_errors = bisect(0.0, 2.0)
secant_errors = secant(0.0, 2.0)

plt.plot(newton_errors, label='Newton-Raphson', color='blue')
plt.plot(bisect_errors, label='Bisection', color='red')
plt.plot(secant_errors, label='Secant', color='green')
plt.yscale('log')
plt.xlabel('Iteration')
plt.ylabel('Error')
plt.title('Convergence of Root Finding Methods')
plt.legend()
plt.show()