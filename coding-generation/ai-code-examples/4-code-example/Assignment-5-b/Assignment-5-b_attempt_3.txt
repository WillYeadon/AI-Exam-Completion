import numpy as np
import matplotlib.pyplot as plt

def transition(p):
    return np.random.rand() < p

def evolve_state(state, p_A_to_B, p_B_to_A, p_C_to_A=0):
    if state == 'A' and transition(p_A_to_B):
        return 'B'
    elif state == 'B' and transition(p_B_to_A):
        return 'A'
    elif state == 'C' and transition(p_C_to_A):
        return 'A'
    else:
        return state

def evolve_list(states, p_A_to_B, p_B_to_A, p_C_to_A=0):
    return [evolve_state(state, p_A_to_B, p_B_to_A, p_C_to_A) for state in states]

def evolve_system(states, p_A_to_B, p_B_to_A, p_C_to_A, n_steps):
    results = []
    for _ in range(n_steps):
        states = evolve_list(states, p_A_to_B, p_B_to_A, p_C_to_A)
        counts = [states.count('A'), states.count('B'), states.count('C')]
        results.append(counts)
    return np.array(results)

def simulation():
    n_A0 = 0
    n_B0 = 0
    n_C0 = 250

    half_life_A = 10.1
    half_life_B = 15.7
    half_life_C_to_A = 3.2
    
    dt = 100 / 200  # 100 hours, 200 steps
    p_A_to_B = 1 - 2**(-dt/half_life_A)
    p_B_to_A = 1 - 2**(-dt/half_life_B)
    p_C_to_A = 1 - 2**(-dt/half_life_C_to_A)
    
    states = ['A']*n_A0 + ['B']*n_B0 + ['C']*n_C0
    
    results_with_flux = evolve_system(states, p_A_to_B, p_B_to_A, p_C_to_A, 200)
    results_without_flux = evolve_system(results_with_flux[-1], p_A_to_B, p_B_to_A, 0, 200)
    
    results = np.vstack((results_with_flux, results_without_flux))
    return results

n_runs = 20
all_results = np.array([simulation() for _ in range(n_runs)])

timesteps = np.arange(0, 200) / 2  # in hours because we have 100 hours with 200 steps
mean_A = np.mean(all_results[:, :, 0], axis=0)
std_A = np.std(all_results[:, :, 0], axis=0)

plt.errorbar(np.arange(400) / 2, mean_A, yerr=std_A, fmt='o-', label='Number of A atoms')
plt.xlabel('Time (hours)')
plt.ylabel('Number of A atoms')
plt.title('Number of A atoms over time with error bars')
plt.legend()
plt.show()