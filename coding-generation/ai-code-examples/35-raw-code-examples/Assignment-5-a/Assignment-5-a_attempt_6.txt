import random
import numpy as np
import matplotlib.pyplot as plt

def has_transition_occurred(transition_prob):
    r = random.random()
    return r < transition_prob

def evolve_state(current_state, transition_rules):
    new_state = current_state.copy()
    for rule in transition_rules:
        current_atom = rule[0]
        next_atom = rule[1]
        transition_prob = rule[2]
        if current_state[current_atom] > 0 and has_transition_occurred(transition_prob):
            new_state[current_atom] -= 1
            new_state[next_atom] += 1
    return new_state

def evolve_system(initial_state, transition_rules, n_timesteps, dt):
    states = [initial_state]
    current_state = initial_state.copy()
    for _ in range(n_timesteps):
        new_state = evolve_state(current_state, transition_rules)
        states.append(new_state)
        current_state = new_state
    return np.array(states)

# Define the initial state and transition rules
initial_state = {'A': 0, 'B': 0, 'C': 250}
transition_rules = [('C', 'A', 1/3.2), ('C', 'B', 2/3.2), ('A', 'B', 1/10.1), ('B', 'C', 1/15.7)]

# Evolve the system for 100 hours with neutron flux on and then for another 100 hours with neutron flux off
n_timesteps = 200
dt = 0.5
states = evolve_system(initial_state, transition_rules, n_timesteps, dt)
final_state = states[-1]

# Plot the results
time = np.linspace(0, n_timesteps*dt, n_timesteps+1)
plt.plot(time, states[:, 'A'], label='A')
plt.plot(time, states[:, 'B'], label='B')
plt.plot(time, states[:, 'C'], label='C')
plt.xlabel('Time (hours)')
plt.ylabel('Number of nuclei')
plt.title('Evolution of nuclei over time')
plt.legend()
plt.show()