import numpy as np
import matplotlib.pyplot as plt

# Define function to calculate mean lifetime from half-life
def mean_lifetime(half_life):
    return half_life / np.log(2)

# Define function for radioactive decay process
def decay_eq(t, N0, tau):
    return N0 * np.exp(-t / tau)

# Analytical solution for decay equation
def analytical_solution(t, N0, tau):
    return decay_eq(t, N0, tau)

# Euler's method for solving ODE
def solve_euler(N0, tau, dt, steps):
    N = np.zeros(steps)
    N[0] = N0
    for i in range(1, steps):
        N[i] = N[i-1] - (N[i-1] / tau) * dt
    return N

# RK4 method for solving ODE
def solve_RK4(N0, tau, dt, steps):
    N = np.zeros(steps)
    N[0] = N0
    for i in range(1, steps):
        k1 = -(N[i-1] / tau)
        k2 = -(N[i-1] + 0.5*k1*dt) / tau
        k3 = -(N[i-1] + 0.5*k2*dt) / tau
        k4 = -(N[i-1] + k3*dt) / tau
        N[i] = N[i-1] + (k1 + 2*k2 + 2*k3 + k4) * dt / 6
    return N

# Initialize parameters
N0 = 1000
half_life_C14 = 5730
tau = mean_lifetime(half_life_C14)
t_max = 10*half_life_C14
steps = np.logspace(1, 4, num=50, dtype=int)
errors_euler = []
errors_RK4 = []

# Calculate errors for different number of steps
for step in steps:
    dt = t_max / step
    t = np.linspace(0, t_max, step+1)
    euler_solution = solve_euler(N0, tau, dt, step+1)
    RK4_solution = solve_RK4(N0, tau, dt, step+1)
    analytical = analytical_solution(t, N0, tau)
    errors_euler.append(np.linalg.norm(euler_solution - analytical))
    errors_RK4.append(np.linalg.norm(RK4_solution - analytical))

# Plotting errors
plt.figure(figsize=(10, 6))
plt.loglog(steps, errors_euler, 'ro-', label='Euler Method')
plt.loglog(steps, errors_RK4, 'bs-', label='RK4 Method')
plt.xlabel('Number of Steps')
plt.ylabel('Error')
plt.title('Comparison of Errors in Euler and RK4 Methods')
plt.legend()
plt.show()