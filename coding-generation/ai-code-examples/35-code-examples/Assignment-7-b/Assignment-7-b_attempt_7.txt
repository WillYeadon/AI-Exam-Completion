import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize
import matplotlib.cm as cm

# Banana function
def banana(r):
    x, y = r
    return (1 - x)**2 + 100*(y - x**2)**2

# Gradient of the banana function
def banana_grad(r):
    x, y = r
    dx = -2 + 2*x - 400*x*(y - x**2)
    dy = 200*(y - x**2)
    return np.array([dx, dy])

# Gradient Descent optimization
def gradientDescent(df, r0, eta, n_steps):
    r = r0
    trajectory = [r]
    for _ in range(n_steps):
        gradient = df(r)
        r = r - eta*gradient
        trajectory.append(r)
    return np.array(trajectory)

# Parameters
etas = [0.001, 0.002, 0.005]
n_steps = 1000
r0 = np.array([0.2, 1])

# Create meshgrid for plotting the banana function
x = np.linspace(-2, 2, 100)
y = np.linspace(-1, 3, 100)
X, Y = np.meshgrid(x, y)
Z = banana([X, Y])

# Plotting the banana function
plt.figure(figsize=(10, 8))
plt.imshow(Z, extent=[-2, 2, -1, 3], origin='lower', norm=Normalize(), cmap=cm.gray)

# Plotting trajectories for different etas
for eta in etas:
    trajectory = gradientDescent(banana_grad, r0, eta, n_steps)
    trajectory = np.array(trajectory)
    plt.plot(trajectory[:,0], trajectory[:,1], label=f'Eta={eta}')

plt.xlabel('x')
plt.ylabel('y')
plt.title("Gradient Descent Optimization Trajectories for Rosenbrock's Banana Function")
plt.legend()
plt.colorbar(label='Banana Function Value')
plt.show()