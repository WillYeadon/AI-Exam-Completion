import numpy as np
import matplotlib.pyplot as plt


def findPi(n_points):
    inside_circle = 0
    for _ in range(n_points):
        x, y = np.random.uniform(-1, 1, 2)
        if x**2 + y**2 <= 1:
            inside_circle += 1
    pi_estimate = (inside_circle / n_points) * 4
    return pi_estimate


def integrate(dim, n_points):
    inside_ball = 0
    for _ in range(n_points):
        point = np.random.uniform(-1, 1, dim)
        if np.sum(point**2) <= 1:
            inside_ball += 1
    volume_estimate = (inside_ball / n_points) * (2**dim)
    return volume_estimate


def simulate_integration_error(num_dimensions, n_points_values):
    results = np.zeros((len(n_points_values) + 1, num_dimensions + 1))
    results[-1, :] = 1 / np.sqrt(n_points_values)[:, None]
    
    for dim in range(1, num_dimensions + 1):
        for i, n_points in enumerate(n_points_values):
            estimates = [integrate(dim, n_points) for _ in range(10)]
            error = np.std(estimates)
            results[i, dim] = error
    
    return results


def f(x):
    return 1 + 2 / (1 + x**2) + np.cos(np.sqrt(3 * x))**2


def genSample(npts):
    x_vals = np.linspace(0, 10, 1000)
    f_vals = f(x_vals)
    f_max = np.max(f_vals)
    
    sample = []
    while len(sample) < npts:
        x = np.random.uniform(0, 10)
        y = np.random.uniform(0, f_max)
        if y <= f(x):
            sample.append(x)
    
    return np.array(sample)


# Generate samples and plot
n_samples = 10000
samples = genSample(n_samples)

x_vals = np.linspace(0, 10, 1000)
f_vals = f(x_vals)
f_density = f_vals / np.trapz(f_vals, x_vals)

plt.hist(samples, bins=50, density=True, alpha=0.6, color='g', label='Sample Distribution')
plt.plot(x_vals, f_density, 'r', lw=2, label='PDF')
plt.xlabel('x')
plt.ylabel('Frequency / Probability Density')
plt.title('Sample Distribution vs Theoretical PDF')
plt.legend()
plt.show()