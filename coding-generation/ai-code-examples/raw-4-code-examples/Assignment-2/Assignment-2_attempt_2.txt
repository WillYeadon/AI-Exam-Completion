import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import quad

# Define the function f
def f(x):
    return x**2 * np.cos(2*x)

# Define the analytically derived indefinite integral function g
def g(x):
    return (x**2/2) * np.sin(2*x) + (x/4) * np.cos(2*x) - np.sin(2*x)/8

# Function to calculate the definite integral analytically
def definite_integral_analytical(x_min, x_max):
    return g(x_max) - g(x_min)

# Simpson's rule implementation
def definite_integral_simpson(f, x_min, x_max, N):
    # Ensure N is even
    if N % 2 == 1:
        N += 1

    h = (x_max - x_min) / N
    integral_sum = f(x_min) + f(x_max)

    for i in range(1, N):
        x = x_min + i * h
        if i % 2 == 0:
            integral_sum += 2 * f(x)
        else:
            integral_sum += 4 * f(x)
    
    integral_sum *= h/3
    return integral_sum

# Define function to calculate fractional error
def fractional_error(x_min, x_max, N):
    analytical_result = definite_integral_analytical(x_min, x_max)
    numerical_result = definite_integral_simpson(f, x_min, x_max, N)
    return abs(numerical_result - analytical_result) / abs(analytical_result)

# Parameters
x_min = 0
x_max = 3.0

# N values from 2 to 1000 (even values)
N_values = np.arange(2, 1001, 2)
errors = []

for N in N_values:
    errors.append(fractional_error(x_min, x_max, N))

# Plot the fractional error on a log-log scale
plt.figure(figsize=(10, 7))
plt.loglog(N_values, errors, marker='o', linestyle='--', color='b', label='Fractional Error')
plt.xlabel('Number of Panels (N)')
plt.ylabel('Fractional Error')
plt.title('Fractional Error in Definite Integral using Simpson\'s Rule')
plt.legend()
plt.grid(True)
plt.show()