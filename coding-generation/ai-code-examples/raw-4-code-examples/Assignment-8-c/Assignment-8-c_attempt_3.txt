import numpy as np
import matplotlib.pyplot as plt

class Walker:
    def __init__(self, ndim=1, step_size=1, initial_position=None):
        self.ndim = ndim
        self.step_size = step_size
        if initial_position is None:
            self.pos = np.zeros(ndim)
        else:
            self.pos = initial_position
        
        self.create_steps_list()

    def create_steps_list(self):
        if self.ndim == 1:
            self.steps = [self.step_size, -self.step_size]
        else:
            self.steps = []
            for dim in range(self.ndim):
                for step in [self.step_size, -self.step_size]:
                    step_vector = np.zeros(self.ndim)
                    step_vector[dim] = step
                    self.steps.append(step_vector)

    def pick_step(self):
        return self.steps[np.random.randint(len(self.steps))]

    def do_steps(self, n):
        trajectory = np.zeros((n+1, self.ndim))
        trajectory[0] = self.pos
        for t in range(1, n+1):
            step = self.pick_step()
            self.pos += step
            trajectory[t] = self.pos
        return trajectory

# Task Implementation
np.random.seed(42)
rand_pos = np.random.rand(1000, 2)

# Step sizes and number of steps
step_size = 0.05
num_steps_list = [10, 100, 500]

# List of colors for the plots
colors = ['b', 'g', 'r']

fig, axes = plt.subplots(1, 3, figsize=(18, 6))

for i, num_steps in enumerate(num_steps_list):
    walkers = [Walker(ndim=2, step_size=step_size, initial_position=pos.copy()) for pos in rand_pos]
    final_positions = []

    for walker in walkers:
        trajectory = walker.do_steps(num_steps)
        final_positions.append(trajectory[-1])

    final_positions = np.array(final_positions)

    axes[i].scatter(final_positions[:, 0], final_positions[:, 1], c=colors[i], alpha=0.5)
    axes[i].set_title(f'Walker positions after {num_steps} steps')
    axes[i].set_xlim(0, 1)
    axes[i].set_ylim(0, 1)
    axes[i].set_xlabel('x position')
    axes[i].set_ylabel('y position')
    axes[i].grid(True)

plt.tight_layout()
plt.show()