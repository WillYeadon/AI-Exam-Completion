import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm

# Define the Banana function
def banana(r):
    x, y = r
    return (1 - x)**2 + 100*(y - x**2)**2

# Define the Gradient of the Banana function
def banana_grad(r):
    x, y = r
    dfdx = 2*(200*x**3 - 200*x*y + x - 1)
    dfdy = 200*(y - x**2)
    return np.array([dfdx, dfdy])

# Implement the Gradient Descent Algorithm
def gradientDescent(df, r0, eta, n_steps):
    r = r0
    trajectory = [r]
    for _ in range(n_steps):
        grad = df(r)
        r = r - eta * grad
        trajectory.append(r)
    return np.array(trajectory)

# Initialize parameters for the banana function plot
n = 100
x = np.linspace(-2, 2, n)
y = np.linspace(-1, 3, n)
X, Y = np.meshgrid(x, y)
data = banana(np.array([X, Y]))

# Plot the banana function
plt.figure(figsize=(10,6))
im = plt.imshow(data, extent=(-2, 2, -1, 3), origin='lower', cmap=cm.Greys, alpha=0.8)
plt.colorbar(im, label='Banana Function Value')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Gradient Descent Trajectories on Rosenbrock\'s Banana Function')

# Set the initial point for all trajectories
r0 = np.array([0.2, 1])

# Define different step sizes (etas)
etas = [0.001, 0.002, 0.005]

# Plot trajectories for different step sizes
for i, eta in enumerate(etas):
    trajectory = gradientDescent(banana_grad, r0, eta, 1000)
    plt.plot(trajectory[:, 0], trajectory[:, 1], label=f'eta = {eta}')

plt.legend()
plt.show()