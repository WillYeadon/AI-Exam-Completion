import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return x**2 * np.cos(2*x)

def g(x):
    return (x**2/5)*np.sin(2*x) + (2*x/25)*np.cos(2*x) - 2/25

def integrate_numeric(x_min, x_max, N):
    dx = (x_max - x_min) / N
    X = np.linspace(x_min, x_max, N+1)
    Y = f(X)
    integral = dx/3 * np.sum(Y[0:-1:2] + 4*Y[1::2] + Y[2::2])
    return integral

x_min = 0
x_max = 5
N_values = [4, 8, 16, 32, 64, 128, 256, 512]
analytical_result = g(x_max)
numerical_results = []

for N in N_values:
    numerical_result = integrate_numeric(x_min, x_max, N)
    numerical_results.append(numerical_result)
    error = np.abs(numerical_result - analytical_result) / analytical_result

plt.figure(figsize=(10, 6))
plt.loglog(N_values, error, marker='o')
plt.xlabel('Number of Panels')
plt.ylabel('Fractional Error')
plt.title('Fractional Error in Numerical Integration using Simpson\'s Rule')
plt.grid(True)
plt.show()