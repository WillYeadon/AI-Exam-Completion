import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return x**2 * np.cos(2*x)

def g(x):
    return (-x**2/2)*np.cos(2*x) + (1/2)*np.sin(2*x)

def integral_f(x_min, x_max):
    return g(x_max) - g(x_min)

def simpsons_rule(f, a, b, N):
    h = (b - a) / N
    x = np.linspace(a, b, N+1)
    y = f(x)
    
    result = h/3 * np.sum(y[0:-1:2] + 4*y[1::2] + y[2::2])
    
    return result

# Calculate the exact integral over the interval [0, np.pi]
exact_integral = integral_f(0, np.pi)

# Initialize lists to store the results
N_values = [2**n for n in range(1, 11)]
errors = []

# Calculate the errors for different number of panels
for N in N_values:
    numerical_integral = simpsons_rule(f, 0, np.pi, N)
    error = np.abs(numerical_integral - exact_integral) / exact_integral
    errors.append(error)

# Create a log-log plot of errors vs N_values
plt.figure()
plt.loglog(N_values, errors, marker='o')
plt.xlabel('Number of Panels (N)')
plt.ylabel('Fractional Error')
plt.title('Fractional Error in Numerical Integration using Simpson\'s Rule')
plt.grid(True)
plt.show()