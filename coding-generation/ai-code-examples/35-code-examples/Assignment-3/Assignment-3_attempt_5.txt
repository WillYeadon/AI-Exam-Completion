import numpy as np
import matplotlib.pyplot as plt

# Constants
half_life_C14 = 5730

# Function to calculate mean lifetime from half-life
def calculate_mean_lifetime(half_life):
    return half_life / np.log(2)

# Radioactive decay function
def decay(t, N0, tau):
    return N0 * np.exp(-t/tau)

# Analytical solution of the decay equation
def analytical_solution(t, N0, tau):
    return decay(t, N0, tau)

# Euler's method for solving ODE
def solve_euler(func, y0, t0, t_end, h):
    t = np.arange(t0, t_end + h, h)
    y = np.zeros_like(t)
    y[0] = y0
    for i in range(1, len(t)):
        y[i] = y[i-1] + h * func(t[i-1], y[i-1], tau)
    return t, y

# RK4 method for solving ODE
def solve_RK4(func, y0, t0, t_end, h):
    t = np.arange(t0, t_end + h, h)
    y = np.zeros_like(t)
    y[0] = y0
    for i in range(1, len(t)):
        k1 = func(t[i-1], y[i-1], tau)
        k2 = func(t[i-1] + 0.5*h, y[i-1] + 0.5*h*k1, tau)
        k3 = func(t[i-1] + 0.5*h, y[i-1] + 0.5*h*k2, tau)
        k4 = func(t[i-1] + h, y[i-1] + h*k3, tau)
        y[i] = y[i-1] + h * (k1 + 2*k2 + 2*k3 + k4) / 6
    return t, y

# Calculate mean lifetime from half-life
tau = calculate_mean_lifetime(half_life_C14)

# Initial conditions
N0 = 1.0
t0 = 0
t_end = 20000
h_values = np.array([1, 10, 100, 1000, 10000])

# Analytical solution
t_analytical = np.linspace(t0, t_end, 1000)
y_analytical = analytical_solution(t_analytical, N0, tau)

# Calculate errors for different step sizes
errors_euler = []
errors_RK4 = []

for h in h_values:
    t_euler, y_euler = solve_euler(decay, N0, t0, t_end, h)
    t_RK4, y_RK4 = solve_RK4(decay, N0, t0, t_end, h)

    analytical_values = analytical_solution(t_euler, N0, tau)

    errors_euler.append(np.max(np.abs(y_euler - analytical_values)))
    errors_RK4.append(np.max(np.abs(y_RK4 - analytical_values)))

# Plotting errors versus number of steps
plt.figure(figsize=(10, 6))
plt.loglog(h_values, errors_euler, marker='o', label='Euler Method', color='b')
plt.loglog(h_values, errors_RK4, marker='s', label='RK4 Method', color='r')
plt.xlabel('Number of Steps')
plt.ylabel('Error')
plt.title('Errors in Euler and RK4 Methods')
plt.legend()
plt.show()