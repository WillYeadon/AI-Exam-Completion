import random
import numpy as np
import matplotlib.pyplot as plt

def transition_occured(probability):
    r = random.random()
    if r < probability:
        return True
    else:
        return False

def apply_transition(current_state, transitions):
    new_state = current_state
    for transition in transitions:
        if transition_occured(transition['probability']):
            new_state = transition['new_state']
    return new_state

def evolve_system(initial_state, transitions, n_timesteps):
    states = [initial_state]
    current_state = initial_state
    for _ in range(n_timesteps):
        current_state = apply_transition(current_state, transitions)
        states.append(current_state)
    return states

# Define transition probabilities
p_A = 1 - 2 ** (-1 / 10.1)
p_B = 1 - 2 ** (-1 / 15.7)
p_C_flux = 1 - 2 ** (-1 / 3.2)
p_C_no_flux = 0

# Define transition rules with and without neutron flux
transitions_flux = [
    {'probability': p_A, 'new_state': 'A'},
    {'probability': p_B, 'new_state': 'B'},
    {'probability': p_C_flux, 'new_state': 'A'}
]

transitions_no_flux = [
    {'probability': p_A, 'new_state': 'A'},
    {'probability': p_B, 'new_state': 'B'},
    {'probability': p_C_no_flux, 'new_state': 'C'}
]

# Run the simulation 20 times
n_simulations = 20
n_timesteps = 200
initial_NA = 0
initial_NB = 0
initial_NC = 250

results = []
for _ in range(n_simulations):
    states_flux = evolve_system(['C'] * initial_NC, transitions_flux, n_timesteps)
    states_no_flux = evolve_system(states_flux[-1], transitions_no_flux, n_timesteps)
    results.append([states_flux, states_no_flux])

# Calculate average and uncertainty on the number of A atoms as a function of time
averages = []
uncertainties = []
for i in range(n_timesteps + 1):
    A_counts = [sim[0][i].count('A') for sim in results]
    avg_A = np.average(A_counts)
    std_A = np.std(A_counts)
    averages.append(avg_A)
    uncertainties.append(std_A)

# Plot the results
plt.errorbar(range(n_timesteps + 1), averages, yerr=uncertainties, fmt='o')
plt.xlabel('Time Steps')
plt.ylabel('Average Number of A Atoms')
plt.title('Average Number of A Atoms Over Time with Uncertainty')
plt.show()