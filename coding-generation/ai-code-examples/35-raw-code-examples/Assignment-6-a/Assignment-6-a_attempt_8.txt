import numpy as np
import matplotlib.pyplot as plt

def findPi(n_points):
    x = np.random.uniform(0, 1, n_points)
    y = np.random.uniform(0, 1, n_points)
    inside_circle = (x**2 + y**2) < 1
    pi_estimate = 4 * np.sum(inside_circle) / n_points
    return pi_estimate

def integrate(n_points, dim):
    random_points = np.random.uniform(-1, 1, (n_points, dim))
    inside_ball = np.linalg.norm(random_points, axis=1) < 1
    volume_estimate = 2**dim * np.sum(inside_ball) / n_points
    return volume_estimate



# Testing the functions and error scaling
np.random.seed(3)
n_points = [1000, 10000, 100000, 1000000]
dimensions = [2, 3, 5, 10]

errors = []
for dim in dimensions:
    errors_dim = []
    for n in n_points:
        volume_estimate = integrate(n, dim)
        error = np.abs(volume_estimate - np.pi**(dim/2) / np.math.gamma(dim/2 + 1))
        errors_dim.append(error)
    errors.append(errors_dim)

# Plotting
plt.figure(figsize=(12, 6))
for i, dim in enumerate(dimensions):
    plt.loglog(n_points, errors[i], marker='o', label=f'Dimension {dim}')

plt.title('Monte Carlo Integration Error Scaling with Dimension')
plt.xlabel('Number of Points')
plt.ylabel('Absolute Error')
plt.legend()
plt.grid(True)
plt.show()