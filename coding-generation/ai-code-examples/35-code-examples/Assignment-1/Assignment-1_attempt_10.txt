import numpy as np
import matplotlib.pyplot as plt

# Define the function f(x) = sin(2x)
def f(x):
    return np.sin(2*x)

# Define the analytical derivative of f
def analytical_derivative(x):
    return 2 * np.cos(2*x)

# Implement the forward difference method for numerical differentiation
def numerical_derivative(f, x, dx):
    return (f(x + dx) - f(x)) / dx

# Define the range of x values
x = np.linspace(0, 2*np.pi, 100)

# Calculate the analytical derivative values
analytical_values = analytical_derivative(x)

# Calculate the numerical derivative values for different dx
dx_values = [0.1, 0.01, 0.001]
numerical_values = [numerical_derivative(f, x, dx) for dx in dx_values]

# Create the initial plot setup
plt.figure(figsize=(10, 6))

# Plot the difference between analytical and numerical derivatives for each dx
for i in range(len(dx_values)):
    difference = np.abs(analytical_values - numerical_values[i])
    plt.plot(x, difference, label=f'dx = {dx_values[i]}')

plt.xlabel('x')
plt.ylabel('Absolute Difference')
plt.title('Analytical vs Numerical Derivative Accuracy')
plt.legend()
plt.grid(True)

plt.show()