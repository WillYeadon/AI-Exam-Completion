import numpy as np
import matplotlib.pyplot as plt
import random

# Function to determine if a transition has occurred based on probability
def check_transition(probability):
    r = random.random()
    if r < probability:
        return True
    else:
        return False

# Function to evolve the system based on transition rules
def evolve_system(current_state, transition_rules):
    new_state = current_state.copy()
    for i, rule in enumerate(transition_rules):
        if check_transition(rule[1]):
            new_state[i] -= 1
            new_state[rule[0]] += 1
    return new_state

# Function to evolve the system for multiple time steps
def evolve_over_time(initial_state, transition_rules, n_timesteps):
    state = initial_state
    state_history = [state.copy()]
    for _ in range(n_timesteps):
        state = evolve_system(state, transition_rules)
        state_history.append(state)
    return np.array(state_history)

# Initial amounts of A, B, and C nuclei
NA, NB, NC = 0, 0, 250
initial_state = np.array([NA, NB, NC])

# Transition rules: A->B, B->C, C->A
transition_rules = [[0, 1, 1 / 10.1], [1, 2, 1 / 15.7], [2, 0, 1 / 3.2]]

# Evolve the system
n_timesteps = 200
state_history_flux_on = evolve_over_time(initial_state, transition_rules, n_timesteps)

# Turn off neutron flux (C -> A no longer allowed)
transition_rules_no_flux = [[0, 1, 1 / 10.1], [1, 2, 1 / 15.7]]
state_history_flux_off = evolve_over_time(state_history_flux_on[-1], transition_rules_no_flux, n_timesteps)

# Plotting
time = np.linspace(0, 200, 401)
plt.figure(figsize=(10, 6))
plt.plot(time, state_history_flux_on[:, 0], label='Nuclei A (Neutron Flux On)')
plt.plot(time, state_history_flux_on[:, 1], label='Nuclei B (Neutron Flux On)')
plt.plot(time, state_history_flux_on[:, 2], label='Nuclei C (Neutron Flux On)')
plt.plot(time[200:], state_history_flux_off[:, 0], 'k--', label='Nuclei A (Neutron Flux Off)')
plt.plot(time[200:], state_history_flux_off[:, 1], 'k--', label='Nuclei B (Neutron Flux Off)')
plt.plot(time[200:], state_history_flux_off[:, 2], 'k--', label='Nuclei C (Neutron Flux Off)')
plt.xlabel('Time (hours)')
plt.ylabel('Number of Nuclei')
plt.title('Evolution of Nuclei over Time')
plt.legend()
plt.grid(True)
plt.show()