import numpy as np
import matplotlib.pyplot as plt

class Walker:
    def __init__(self, ndim=1, step_size=1):
        self.ndim = ndim
        self.step_size = step_size
        self.pos = np.zeros(ndim)
        self.steps = self.generate_steps()

    def generate_steps(self):
        steps = []
        for i in range(self.ndim):
            for sign in [-1, 1]:
                step = np.zeros(self.ndim)
                step[i] = sign * self.step_size
                steps.append(step)
        return steps

    def pickStep(self):
        return self.steps[np.random.randint(low=0, high=len(self.steps))]

    def doSteps(self, n):
        trajectory = np.zeros((n+1, self.ndim))
        trajectory[0] = self.pos
        for i in range(1, n+1):
            step = self.pickStep()
            self.pos += step
            trajectory[i] = self.pos
        return trajectory


Next, let's simulate the diffusion of particles and plot their positions after 10, 100, and 500 steps:


# Initialize the simulation parameters
n_walkers = 1000
steps_list = [10, 100, 500]
step_size = 0.05
ndim = 2  # 2D

# Random initial positions in the unit square
rand_pos = np.random.rand(n_walkers, ndim)

# Function to perform the simulation
def simulate_walkers(rand_pos, n_walkers, steps, step_size):
    walker_positions = []
    for start_pos in rand_pos:
        walker = Walker(ndim=ndim, step_size=step_size)
        walker.pos = start_pos
        final_pos = walker.doSteps(steps)[-1]
        walker_positions.append(final_pos)
    return np.array(walker_positions)

# Plotting the walker positions after 10, 100, and 500 steps
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

for i, steps in enumerate(steps_list):
    positions = simulate_walkers(rand_pos, n_walkers, steps, step_size)
    axs[i].scatter(positions[:, 0], positions[:, 1], s=1)
    axs[i].set_title(f'Positions after {steps} steps')
    axs[i].set_xlim([0, 1])
    axs[i].set_ylim([0, 1])
    axs[i].set_xlabel('X position')
    axs[i].set_ylabel('Y position')

plt.suptitle('Diffusion of 1000 walkers in the unit square')
plt.tight_layout()
plt.show()
"""

# Here is the full script wrapped together for completeness
import numpy as np
import matplotlib.pyplot as plt

class Walker:
    def __init__(self, ndim=1, step_size=1):
        self.ndim = ndim
        self.step_size = step_size
        self.pos = np.zeros(ndim)
        self.steps = self.generate_steps()

    def generate_steps(self):
        steps = []
        for i in range(self.ndim):
            for sign in [-1, 1]:
                step = np.zeros(self.ndim)
                step[i] = sign * self.step_size
                steps.append(step)
        return steps

    def pickStep(self):
        return self.steps[np.random.randint(low=0, high=len(self.steps))]

    def doSteps(self, n):
        trajectory = np.zeros((n+1, self.ndim))
        trajectory[0] = self.pos
        for i in range(1, n+1):
            step = self.pickStep()
            self.pos += step
            trajectory[i] = self.pos
        return trajectory

# Initialize the simulation parameters
n_walkers = 1000
steps_list = [10, 100, 500]
step_size = 0.05
ndim = 2  # 2D

# Random initial positions in the unit square
rand_pos = np.random.rand(n_walkers, ndim)

# Function to perform the simulation
def simulate_walkers(rand_pos, n_walkers, steps, step_size):
    walker_positions = []
    for start_pos in rand_pos:
        walker = Walker(ndim=ndim, step_size=step_size)
        walker.pos = start_pos
        final_pos = walker.doSteps(steps)[-1]
        walker_positions.append(final_pos)
    return np.array(walker_positions)

# Plotting the walker positions after 10, 100, and 500 steps
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

for i, steps in enumerate(steps_list):
    positions = simulate_walkers(rand_pos, n_walkers, steps, step_size)
    axs[i].scatter(positions[:, 0], positions[:, 1], s=1)
    axs[i].set_title(f'Positions after {steps} steps')
    axs[i].set_xlim([0, 1])
    axs[i].set_ylim([0, 1])
    axs[i].set_xlabel('X position')
    axs[i].set_ylabel('Y position')

plt.suptitle('Diffusion of 1000 walkers in the unit square')
plt.tight_layout()
plt.show()