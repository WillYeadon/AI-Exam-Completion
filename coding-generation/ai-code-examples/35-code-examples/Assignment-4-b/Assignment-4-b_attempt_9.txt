import numpy as np
import matplotlib.pyplot as plt

# Define constants for the simulation
g = 9.81  # acceleration due to gravity

# Function to calculate cross-sectional area of a sphere
def area(radius):
    return np.pi * radius**2

# Function to calculate the mass of an iron sphere
def mass(radius):
    density = 7874  # density of iron in kg/m^3
    return (4/3) * np.pi * radius**3 * density

# Calculating area and mass of the cannonball
radius = 0.2  # in meters
A = area(radius)
m = mass(radius)

# Function to model cannonball's motion
def model_cannonball_motion(v, theta, x, y):
    x.append(x[-1] + v * np.cos(theta) * dt)
    y.append(y[-1] + v * np.sin(theta) * dt)
    v_x = v * np.cos(theta) - (A * rho * v**2 / (2 * m)) * v * np.cos(theta) * dt
    v_y = v * np.sin(theta) - g * dt - (A * rho * v**2 / (2 * m)) * v * np.sin(theta) * dt
    v = np.sqrt(v_x**2 + v_y**2)
    theta = np.arctan2(v_y, v_x)
    return v, theta

# Euler's method for solving the ODE
def solve_euler(v0, theta0):
    x = [0]
    y = [0]
    v = v0
    theta = np.radians(theta0)
    while y[-1] >= 0:
        v, theta = model_cannonball_motion(v, theta, x, y)
    return x, y

# Function to find the x-coordinate where the trajectory crosses y=0
def find_range(x, y):
    return x[-1]

# Function to find the range of the projectile
def calculate_range(v0, theta):
    x, y = solve_euler(v0, theta)
    return find_range(x, y)

# Stores the trajectories for different values of the initial angle
# Uses the same velocity v0=125 m/s for all angles
def store_trajectories(velocities, theta):
    results = {}
    for v0 in velocities:
        ranges = []
        ranges_no_air_resistance = []
        for v in v0:
            ranges.append(calculate_range(v, theta))
            ranges_no_air_resistance.append((v**2 * np.sin(2*np.radians(theta)))/g)
        results["Velocity: " + str(v)] = ranges
        results["Velocity: " + str(v) + " (No Air Resistance)"] = ranges_no_air_resistance
    return results

# Initial velocities for analysis
velocities = [75, 100, 125, 150, 175]

# Air resistance parameters
rho = 1.2  # air density in kg/m^3
dt = 0.1  # time step in seconds

# Plotting the ranges for different initial velocities with and without air resistance
theta = 60  # in degrees
results = store_trajectories(velocities, theta)

for key, value in results.items():
    plt.plot(velocities, value, label=key)

plt.xlabel('Initial Velocity (m/s)')
plt.ylabel('Range (m)')
plt.title('Effect of Initial Velocity on Projectile Range')
plt.legend()
plt.show()