import numpy as np
import matplotlib.pyplot as plt

# Define the function f(x) = sin(2x)
def f(x):
    return np.sin(2*x)

# Analytical derivative of f(x) = sin(2x)
def analytical_derivative(x):
    return 2*np.cos(2*x)

# Implement the forward difference method for numerical differentiation
def numerical_derivative(f, x, dx):
    return (f(x+dx) - f(x)) / dx

# Create the initial plot setup
x = np.linspace(0, 2*np.pi, 100)
dx_values = [0.1, 0.01, 0.001]

plt.figure(figsize=(10, 6))

# Calculate and plot the difference between analytical and numerical derivatives for each dx value
for dx in dx_values:
    numerical_deriv = [numerical_derivative(f, val, dx) for val in x]
    analytical_deriv = [analytical_derivative(val) for val in x]
    difference = np.abs(np.array(analytical_deriv) - np.array(numerical_deriv))
    
    plt.plot(x, difference, label=f'dx = {dx}')

plt.xlabel('x')
plt.ylabel('|Analytical Derivative - Numerical Derivative|')
plt.title('Accuracy of Numerical Derivatives')
plt.legend()
plt.grid(True)

plt.show()