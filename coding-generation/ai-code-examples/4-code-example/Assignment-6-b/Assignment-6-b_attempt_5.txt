import numpy as np
import matplotlib.pyplot as plt

def monte_carlo_pi(n_points):
    x = np.random.uniform(-1, 1, n_points)
    y = np.random.uniform(-1, 1, n_points)
    inside_circle = x**2 + y**2 <= 1
    pi_estimate = 4 * np.sum(inside_circle) / n_points
    return pi_estimate

def monte_carlo_volume(n_points, dim):
    points = np.random.uniform(-1, 1, (n_points, dim))
    inside_sphere = np.sum(points**2, axis=1) <= 1
    volume_estimate = (2**dim) * np.mean(inside_sphere)
    return volume_estimate

def error_scaling():
    n_values = [10**i for i in range(1, 6)]
    dims = [2, 3, 4, 5]
    results = np.zeros((len(dims)+1, len(n_values)))

    for i, dim in enumerate(dims):
        for j, n in enumerate(n_values):
            estimates = [monte_carlo_volume(n, dim) for _ in range(10)]
            error = np.std(estimates)
            results[i, j] = error

    theoretical_error = [1/np.sqrt(n) for n in n_values]
    results[-1, :] = theoretical_error
    return results

def target_function(x):
    return 1 + 2 / (1 + x**2) + np.cos(np.sqrt(3 * x))**2

def normalization_constant(function, start, end, num_points=10000):
    x = np.linspace(start, end, num_points)
    y = function(x)
    normalization = np.trapz(y, x)
    return normalization

def genSample(function, start, end, n_samples=10000):
    x = np.linspace(start, end, 100000)
    y = function(x)
    max_y = np.max(y)
    samples = []

    while len(samples) < n_samples:
        x_rand = np.random.uniform(start, end)
        y_rand = np.random.uniform(0, max_y)
        if y_rand <= function(x_rand):
            samples.append(x_rand)
    return np.array(samples)

def plot_distribution():
    samples = genSample(target_function, 0, 10, n_samples=10000)
    plt.hist(samples, bins=50, density=True, alpha=0.6, color='g', label='Generated Distribution')
    x = np.linspace(0, 10, 1000)
    norm_const = normalization_constant(target_function, 0, 10)
    y = target_function(x) / norm_const
    plt.plot(x, y, 'r-', label='Target Function')
    plt.title('Distribution of Values Generated by genSample()')
    plt.xlabel('x')
    plt.ylabel('Density')
    plt.legend()
    plt.show()