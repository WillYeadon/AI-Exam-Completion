import numpy as np
import matplotlib.pyplot as plt

# Function f(x) = x^2 * cos(2x)
def f(x):
    return x**2 * np.cos(2*x)

# Analytical integral of f
def analytical_integral(xmin, xmax):
    return (xmax**2 * np.sin(2*xmax) / 2 + xmax * np.cos(2*xmax) / 4 - xmin**2 * np.sin(2*xmin) / 2 - xmin * np.cos(2*xmin) / 4) / 2

# Simpson's rule for numerical integration
def simpsons_rule(f, xmin, xmax, panels):
    h = (xmax - xmin) / panels
    integral = f(xmin) + f(xmax)
    for i in range(1, panels):
        x = xmin + i * h
        if i % 2 == 0:
            integral += 2 * f(x)
        else:
            integral += 4 * f(x)
    integral *= h / 3
    return integral

# Panel counts
panel_counts = [4, 8, 16, 32, 64, 128, 256, 512, 1024]

# Initialize the list to store panel counts and corresponding fractional errors
fractional_errors = []

# Calculate the analytical result
xmin = 0
xmax = np.pi
analytical_result = analytical_integral(xmin, xmax)

# Calculate the numerical result and fractional error for different panel counts
for panels in panel_counts:
    numerical_result = simpsons_rule(f, xmin, xmax, panels)
    fractional_error = np.abs((numerical_result - analytical_result) / analytical_result)
    fractional_errors.append(fractional_error)

# Plotting the fractional error
plt.loglog(panel_counts, fractional_errors, marker='o')
plt.xlabel('Number of panels')
plt.ylabel('Fractional error')
plt.title('Fractional Error in Simpson\'s Rule Integration')
plt.grid(True, which="both", ls="--")
plt.show()