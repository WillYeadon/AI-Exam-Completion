import numpy as np
import matplotlib.pyplot as plt

# Function to estimate Pi using Monte Carlo Integration
def estimate_pi(n_points):
    x = np.random.uniform(-1, 1, n_points)
    y = np.random.uniform(-1, 1, n_points)
    inside_circle = (x**2 + y**2) <= 1
    pi_estimate = 4 * np.sum(inside_circle) / n_points
    return pi_estimate

# Function to estimate the volume of a unit ball in `dim` dimensions
def estimate_unit_ball_volume(dim, n_points):
    points = np.random.uniform(-1, 1, (n_points, dim))
    inside_ball = np.sum(points**2, axis=1) <= 1
    volume_estimate = (2**dim) * np.sum(inside_ball) / n_points
    return volume_estimate

# Parameters
dimensions = [2, 3, 4, 5, 6]
n_points_list = [10**i for i in range(1, 7)]

# Collect results
errors = {}

for dim in dimensions:
    errors[dim] = []
    true_volume = np.pi ** (dim / 2) / np.math.gamma((dim / 2) + 1)  # Exact volume
    for n_points in n_points_list:
        estimates = [estimate_unit_ball_volume(dim, n_points) for _ in range(10)]
        mean_estimate = np.mean(estimates)
        error = np.abs(mean_estimate - true_volume)
        errors[dim].append(error)

# Plotting
plt.figure(figsize=(10, 8))

for dim in dimensions:
    label = f'{dim}D'
    plt.plot(n_points_list, errors[dim], label=label, marker='o')

plt.xscale('log')
plt.yscale('log')
plt.xlabel('Number of Points (log scale)')
plt.ylabel('Error (log scale)')
plt.title('Monte Carlo Integration Error Scaling vs Number of Points')
plt.legend(title='Dimensions')
plt.grid(True)

plt.show()