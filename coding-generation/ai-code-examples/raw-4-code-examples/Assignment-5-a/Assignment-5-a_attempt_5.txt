import random

def transition_occurred(probability):
    r = random.random()  # Generate a random number between 0 and 1
    return r < probability  # Return True if the random number is less than the given probability


### Step 2: Implement a function that transitions the state based on a list of transition rules

def state_transition(current_state, transition_rules):
    new_state = current_state.copy()
    for i, rule in enumerate(transition_rules):
        if transition_occurred(rule):
            new_state[i] -= 1  # Reactant gets reduced by 1
            new_state[(i + 1) % 3] += 1  # Product gets increased by 1
    return new_state


### Step 3: Implement a function that transitions a list of states according to the rules

def batch_state_transition(states, transition_rules):
    new_states = []
    for state in states:
        new_states.append(state_transition(state, transition_rules))
    return new_states


### Step 4: Define a function that evolves the system over time

import numpy as np

def evolve_system(NA, NB, NC, n_timesteps, t_max, flux):
    # Define rate constants based on half-lives
    half_life_A = 10.1  # hours
    half_life_B = 15.7  # hours
    half_life_C = 3.2 if flux else float('inf')  # hours with neutron flux on or off
    
    decay_A = np.log(2) / half_life_A
    decay_B = np.log(2) / half_life_B
    decay_C = np.log(2) / half_life_C
    
    dt = t_max / n_timesteps
    
    # Initial states
    states = [[NA, NB, NC]]
    
    for t in range(1, n_timesteps + 1):
        transition_probs = [
            1 - np.exp(-decay_A * dt),  # Probability of transition from A to B
            1 - np.exp(-decay_B * dt),  # Probability of transition from B to C
            1 - np.exp(-decay_C * dt)   # Probability of transition from C to A (depends on flux)
        ]
        
        current_state = states[-1]
        new_state = state_transition(current_state, transition_probs)
        states.append(new_state)
    
    # Convert states to numpy arrays for clarity
    states = np.array(states)
    return states[:, 0], states[:, 1], states[:, 2]  # NA, NB, NC arrays


### Step 5: Evolve the system and create the plot
Here we will create the plot as described in the task.

import matplotlib.pyplot as plt

# Initial parameters
NA = 0
NB = 0
NC = 250

n_timesteps = 200
t_max = 100  # hours

# Evolve with neutron flux
NA_flux, NB_flux, NC_flux = evolve_system(NA, NB, NC, n_timesteps, t_max, True)

# Continue evolving without neutron flux
NA_no_flux, NB_no_flux, NC_no_flux = evolve_system(NA_flux[-1], NB_flux[-1], NC_flux[-1], n_timesteps, t_max, False)

# Combine time arrays
NA_combined = np.concatenate([NA_flux, NA_no_flux])
NB_combined = np.concatenate([NB_flux, NB_no_flux])
NC_combined = np.concatenate([NC_flux, NC_no_flux])

# Time array
time_combined = np.linspace(0, 2 * t_max, 2 * n_timesteps + 1)

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(time_combined, NA_combined, label='NA (A Nuclei)')
plt.plot(time_combined, NB_combined, label='NB (B Nuclei)')
plt.plot(time_combined, NC_combined, label='NC (C Nuclei)')
plt.xlabel('Time (hours)')
plt.ylabel('Number of Nuclei')
plt.title('Evolution of Nuclei Over Time')
plt.legend()
plt.grid(True)
plt.show()