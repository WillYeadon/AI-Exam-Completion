import numpy as np
import matplotlib.pyplot as plt
import random

class Walker:
    def __init__(self, ndim=1, step_size=1):
        self.ndim = ndim
        self.step_size = step_size
        if ndim == 1:
            self.steps = [[step_size], [-step_size]]
        elif ndim == 2:
            self.steps = [[step_size, 0], [-step_size, 0], [0, step_size], [0, -step_size]]
        else:
            raise ValueError("Currently only supports 1D or 2D walk")

        self.pos = np.zeros(ndim, dtype=int)

    def pickStep(self):
        return random.choice(self.steps)

    def doSteps(self, n):
        trajectory = np.zeros((n + 1, self.ndim))
        for i in range(1, n + 1):
            step = self.pickStep()
            self.pos += np.array(step)
            trajectory[i] = self.pos
        return trajectory

# Number of walkers and steps
num_walkers = 100
num_steps = 1000

# Store the final positions and squared positions for each step
positions = np.zeros((num_steps + 1, num_walkers))
squared_positions = np.zeros((num_steps + 1, num_walkers))

# Perform the walks
for i in range(num_walkers):
    walker = Walker(ndim=1)
    trajectory = walker.doSteps(num_steps)
    positions[:, i] = trajectory[:, 0]
    squared_positions[:, i] = trajectory[:, 0]**2

# Compute average position and average squared position
average_position = np.mean(positions, axis=1)
average_squared_position = np.mean(squared_positions, axis=1)

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(average_position, label='Average Position')
plt.plot(average_squared_position, label='Average Squared Position')
plt.title('Average Position and Average Squared Position of 100 1D Walkers')
plt.xlabel('Steps')
plt.ylabel('Position')
plt.legend()
plt.grid(True)
plt.show()