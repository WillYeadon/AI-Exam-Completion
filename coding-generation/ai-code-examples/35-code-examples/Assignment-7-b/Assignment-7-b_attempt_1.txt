import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm

# Define the Rosenbrock's Banana Function
def banana(r):
    return (1 - r[0])**2 + 100*(r[1] - r[0]**2)**2

# Define the gradient of the Banana Function
def banana_grad(r):
    df_dx = -2 * (1 - r[0]) - 400 * r[0] * (r[1] - r[0]**2)
    df_dy = 200 * (r[1] - r[0]**2)
    return np.array([df_dx, df_dy])

# Gradient Descent Optimization
def gradientDescent(df, r0, eta, n_steps):
    trajectory = np.zeros((n_steps + 1, 2))
    trajectory[0] = r0
    for i in range(n_steps):
        gradient = df(trajectory[i])
        trajectory[i+1] = trajectory[i] - eta * gradient
    return trajectory

# Initialize parameters for the banana function plot
n = 200
x = np.linspace(-2, 2, n)
y = np.linspace(-1, 3, n)
X, Y = np.meshgrid(x, y)
data = np.zeros((n, n))

# Populate data with values of the banana function
for i in range(n):
    for j in range(n):
        data[i, j] = banana([x[j], y[i]])

# Plotting the banana function
plt.figure(figsize=(8, 6))
im = plt.imshow(data, extent=(-2, 2, -1, 3), origin='lower', cmap=cm.gray)

# Different step sizes (etas) for gradient descent
etas = [0.001, 0.003, 0.005]
r0 = np.array([0.2, 1])

# Plot trajectories for each step size
for eta in etas:
    trajectory = gradientDescent(banana_grad, r0, eta, 1000)
    plt.plot(trajectory[:, 0], trajectory[:, 1], label=f'eta = {eta}')

plt.title("Gradient Descent Trajectories for Rosenbrock's Banana Function")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()
plt.colorbar(im)
plt.show()