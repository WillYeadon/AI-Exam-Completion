import numpy as np
import matplotlib.pyplot as plt

def integrate(n_points, dim):
    points = np.random.uniform(-1, 1, (n_points, dim))
    norm = np.linalg.norm(points, axis=1)
    count_inside = np.sum(norm < 1)
    return 2**dim * count_inside / n_points

dimensions = [2, 3, 4, 5, 6, 7, 8, 9, 10]
n_points = 100000
errors = []

for dim in dimensions:
    integral = integrate(n_points, dim)
    errors.append(np.abs(integral - np.pi))

plt.figure()
plt.plot(dimensions, errors, marker='o', color='b', label='Integration Error')
plt.yscale('log')
plt.xscale('linear')
plt.xlabel('Dimensions')
plt.ylabel('Error')
plt.title('Monte Carlo Integration Error Scaling with Dimensions')
plt.legend()
plt.show()