import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return x**3 - 2*x - 5

def f_prime(x):
    return 3*x**2 - 2

def NewtonRaphson(f, f_prime, x0, tol=1e-6, max_iter=1000):
    x = x0
    errors = []
    for i in range(max_iter):
        x_new = x - f(x) / f_prime(x)
        error = np.abs(x_new - x)
        errors.append(error)
        if error < tol:
            break
        x = x_new
    return errors

def secant(f, x0, x1, tol=1e-6, max_iter=1000):
    errors = []
    for i in range(max_iter):
        x_new = x1 - f(x1) * (x1 - x0) / (f(x1) - f(x0))
        error = np.abs(x_new - x1)
        errors.append(error)
        if error < tol:
            break
        x0 = x1
        x1 = x_new
    return errors

def bisect(f, a, b, tol=1e-6, max_iter=1000):
    errors = []
    if f(a) * f(b) >= 0:
        raise ValueError("The function values at the endpoints must have different signs.")
    for i in range(max_iter):
        c = (a + b) / 2
        if f(c) == 0:
            break
        if f(a) * f(c) < 0:
            b = c
        else:
            a = c
        error = b - a
        errors.append(error)
        if np.abs(error) < tol:
            break
    return errors

# Root finding for f(x) = x^3 - 2x - 5
root = 0.9575040240772687

# Convergence analysis for Newton-Raphson, secant, and bisection methods
newton_errors = NewtonRaphson(f, f_prime, 1)
secant_errors = secant(f, 2, 1)
bisection_errors = bisect(f, 1, 2)

# Plotting
plt.figure(figsize=(12, 8))
plt.plot(np.arange(len(newton_errors)), newton_errors, label='Newton-Raphson', color='blue')
plt.plot(np.arange(len(secant_errors)), secant_errors, label='Secant', color='green')
plt.plot(np.arange(len(bisection_errors)), bisection_errors, label='Bisection', color='red')
plt.yscale('log')
plt.xlabel('Iterations')
plt.ylabel('Error')
plt.title('Convergence of Root-Finding Methods')
plt.legend()
plt.show()