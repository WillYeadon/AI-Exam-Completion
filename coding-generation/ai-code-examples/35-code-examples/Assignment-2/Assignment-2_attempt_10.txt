import numpy as np
import matplotlib.pyplot as plt

# Define the function f(x) = x^2 * cos(2x)
def f(x):
    return x**2 * np.cos(2*x)

# Define the analytical integral of f
def analytical_integral(x):
    return (x**2 * np.sin(2*x) + 2*x * np.cos(2*x) - 2 * np.sin(2*x)) / 4

# Function to calculate the analytical integral from xmin to xmax
def calculate_analytical_integral(xmin, xmax):
    return analytical_integral(xmax) - analytical_integral(xmin)

# Function to calculate the numerical integral using Simpson's rule
def simpsons_rule_integration(f, xmin, xmax, N):
    dx = (xmax - xmin) / N
    x_values = np.linspace(xmin, xmax, N+1)
    y_values = f(x_values)
    integral = dx/3 * np.sum(y_values[0:-1:2] + 4*y_values[1::2] + y_values[2::2])
    return integral

# Panel counts for investigation
panel_counts = [4, 8, 16, 32, 64, 128, 256, 512, 1024]

# Calculate errors for each panel count
errors = []
for N in panel_counts:
    numerical_integral = simpsons_rule_integration(f, 0, np.pi, N)
    analytical_result = calculate_analytical_integral(0, np.pi)
    error = np.abs(numerical_integral - analytical_result) / analytical_result
    errors.append(error)

# Create a log-log plot showing the fractional error
plt.figure()
plt.loglog(panel_counts, errors, marker='o', color='b', linestyle='-', linewidth=2, label='Fractional Error')
plt.xlabel('Number of Panels')
plt.ylabel('Fractional Error')
plt.title('Fractional Error in Numerical Integration vs. Number of Panels')
plt.legend()
plt.show()