import numpy as np
import matplotlib.pyplot as plt

# Function to determine if a transition occurs based on the transition probability
def transition_probability(half_life, time_step):
    return 1 - 2**(-time_step / half_life)

# Function to evolve a single state according to the transition rules
def evolve_state(state, transition_prob):
    if np.random.rand() < transition_prob:
        return state + 1
    else:
        return state

# Function to evolve a list of states
def evolve_system(states, transition_probs):
    new_states = []
    for state, prob in zip(states, transition_probs):
        new_states.append(evolve_state(state, prob))
    return new_states

# Function to evolve the entire system over 'n_steps'
def evolve_full_system(n_steps, initial_states, transition_probabilities):
    all_states = [initial_states]
    for _ in range(n_steps):
        new_states = evolve_system(all_states[-1], transition_probabilities)
        all_states.append(new_states)
    return np.array(all_states)

# Initial conditions
initial_states = [0, 0, 250]  # A, B, C nuclei
transition_probs_flux_on = [transition_probability(10.1, 1), transition_probability(15.7, 1), transition_probability(3.2, 1)]
transition_probs_flux_off = [transition_probability(10.1, 1), transition_probability(15.7, 1), 0]

# Evolve the system with neutron flux on
states_flux_on = evolve_full_system(200, initial_states, transition_probs_flux_on)

# Evolve the system with neutron flux off
states_flux_off = evolve_full_system(200, states_flux_on[-1], transition_probs_flux_off)

# Create plot
time_steps = np.arange(201)
plt.figure(figsize=(10, 6))
plt.plot(time_steps, states_flux_on[:, 0], label='A nuclei with flux on', color='b')
plt.plot(time_steps, states_flux_on[:, 1], label='B nuclei with flux on', color='g')
plt.plot(time_steps, states_flux_on[:, 2], label='C nuclei with flux on', color='r')
plt.plot(time_steps + 200, states_flux_off[:, 0], label='A nuclei with flux off', linestyle='--', color='b')
plt.plot(time_steps + 200, states_flux_off[:, 1], label='B nuclei with flux off', linestyle='--', color='g')
plt.plot(time_steps + 200, states_flux_off[:, 2], label='C nuclei with flux off', linestyle='--', color='r')

plt.xlabel('Time (hours)')
plt.ylabel('Number of Nuclei')
plt.title('Nuclei Decay and Activation')
plt.legend()
plt.grid(True)
plt.show()