import numpy as np

# Function to estimate the value of pi using Monte Carlo method
def findPi(n_points):
    points = np.random.rand(n_points, 2)
    inside_circle = (points[:, 0]**2 + points[:, 1]**2) < 1
    pi_estimate = 4 * np.sum(inside_circle) / n_points
    return pi_estimate

# Function to estimate the volume of a unit ball in multiple dimensions
def integrate(n_points, dim):
    points = np.random.rand(n_points, dim) * 2 - 1
    inside_ball = np.linalg.norm(points, axis=1) < 1
    volume_estimate = 2**dim * np.sum(inside_ball) / n_points
    return volume_estimate

# Initialize the results array
n_points = 1000
dimensions = np.arange(2, 12)
results = np.zeros((len(dimensions)+1, 2))
for i, dim in enumerate(dimensions):
    results[i, 0] = dim
    results[i, 1] = integrate(n_points, dim)

# Theoretical error scaling (1/sqrt(N))
results[-1, 0] = -1
results[-1, 1] = 2**(-0.5)

# Function to generate sample values distributed according to a given probability density function
def genSample(npts):
    def f(x):
        return 1 + 2/(1 + x**2) + np.cos(np.sqrt(3*x))**2

    x = np.linspace(0, 10, 1000)
    pdf = f(x) / np.trapz(f(x), x)
    sample = np.random.choice(x, size=npts, p=pdf)
    return sample



::: Task :::
Make a plot to show that the values generated are distributed in the right manner. The plot should have a title and axis labels.


import matplotlib.pyplot as plt

# Generate sample values
npts = 1000
sample = genSample(npts)

# Plot the distribution of the generated sample
plt.figure(figsize=(8, 6))
plt.hist(sample, bins=30, density=True, alpha=0.7, color='skyblue', edgecolor='black')
plt.title("Distribution of Generated Sample Values")
plt.xlabel("Value of x")
plt.ylabel("Probability Density")
plt.show()