import numpy as np
import matplotlib.pyplot as plt

# Function to estimate Pi using Monte Carlo method
def estimate_pi(n_points):
    points = np.random.rand(n_points, 2)  # Generate random points in 2D
    inside_circle = points[:, 0]**2 + points[:, 1]**2 <= 1  # Check if points are inside the unit circle
    return 4 * np.sum(inside_circle) / n_points  # Monte Carlo estimate for Pi

# Function to estimate the volume of a unit ball in n dimensions
def estimate_volume(n_points, dim):
    points = np.random.uniform(low=-1, high=1, size=(n_points, dim))  # Generate random points in n dimensions
    inside_ball = np.sum(points**2, axis=1) <= 1  # Check if points are inside the unit ball
    return 2**dim * np.sum(inside_ball) / n_points  # Monte Carlo estimate for volume of unit ball

# Function to simulate integration error scaling with number of points and dimensions
def simulate_error_scaling(n_points, dimensions):
    results = np.zeros((len(n_points), dimensions+1))  # Initialize results array
    for i, n in enumerate(n_points):
        for dim in range(1, dimensions+1):
            volume = estimate_volume(n, dim)  # Estimate the volume in current dimension
            results[i, dim-1] = np.abs(volume - np.pi**(dim/2) / np.math.gamma(dim/2 + 1))  # Absolute error
        results[i, dimensions] = 1 / np.sqrt(n)  # Theoretical scaling error
    return results

# Initialize parameters
n_points = [100, 1000, 10000]
dimensions = 10

# Simulate integration error scaling
results = simulate_error_scaling(n_points, dimensions)

# Function to generate sample values according to a given probability density function
def genSample(num_points):
    x = np.linspace(0, 10, num_points)  # Create x values
    f_x = 1/(np.trapz(1 + 2/(1+x**2) + np.cos(np.sqrt(3*x))**2, x))  # Normalization factor
    sample = np.random.choice(x, num_points, p=(1 + 2/(1+x**2) + np.cos(np.sqrt(3*x))**2) / f_x)  # Generate sample
    
    return sample

# Generate sample values using genSample function
sample_values = genSample(10000)

# Plot the distribution of sample values
plt.figure(figsize=(8, 6))
plt.hist(sample_values, bins=50, color='skyblue', edgecolor='black', alpha=0.7)
plt.title('Distribution of Values Generated by genSample()', fontsize=15)
plt.xlabel('Sample Values', fontsize=12)
plt.ylabel('Frequency', fontsize=12)

plt.show()