import numpy as np
import matplotlib.pyplot as plt

class Walker:
    def __init__(self, ndim=1, step_size=1):
        self.ndim = ndim
        self.step_size = step_size
        if ndim == 1:
            self.steps = [[step_size], [-step_size]]
        elif ndim == 2:
            self.steps = [[step_size, 0], [-step_size, 0], [0, step_size], [0, -step_size]]
        self.pos = np.zeros(ndim)
    
    def pickStep(self):
        return self.steps[np.random.choice(len(self.steps))]
    
    def doSteps(self, n):
        trajectory = np.zeros((n+1, self.ndim))
        trajectory[0] = self.pos
        for i in range(1, n+1):
            step = self.pickStep()
            self.pos = self.pos + step
            trajectory[i] = self.pos
        return trajectory

# Simulation for average position and average squared position of 100 1D walkers using 1000 steps
np.random.seed(42)
n_walkers = 100
n_steps = 1000
avg_pos = np.zeros(n_steps+1)
avg_pos_sq = np.zeros(n_steps+1)

for i in range(n_walkers):
    walker = Walker(ndim=1)
    trajectory = walker.doSteps(n_steps)
    avg_pos += trajectory[:,0]
    avg_pos_sq += (trajectory[:,0])**2

avg_pos /= n_walkers
avg_pos_sq /= n_walkers

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(avg_pos)
plt.title('Average Position of 100 1D Walkers')
plt.xlabel('Step')
plt.ylabel('Average Position')

plt.subplot(1, 2, 2)
plt.plot(avg_pos_sq)
plt.title('Average Squared Position of 100 1D Walkers')
plt.xlabel('Step')
plt.ylabel('Average Squared Position')

plt.tight_layout()
plt.show()

# Simulation to show that average squared distance scaling is dimension independent
n_walkers = 400
n_steps = 100
dimensions = [1, 2, 3, 4]
avg_pos_sq_dim = {}

for D in dimensions:
    avg_pos_sq = np.zeros(n_steps+1)
    for i in range(n_walkers):
        walker = Walker(ndim=D)
        trajectory = walker.doSteps(n_steps)
        avg_pos_sq += np.sum(trajectory**2, axis=1)
    avg_pos_sq /= n_walkers
    avg_pos_sq_dim[D] = avg_pos_sq

plt.figure(figsize=(12, 6))
for D in dimensions:
    plt.plot(avg_pos_sq_dim[D], label=f'Dimension {D}')
plt.title('Average Squared Distance Scaling in Different Dimensions')
plt.xlabel('Step')
plt.ylabel('Average Squared Distance')
plt.legend()
plt.show()

# Diffusion simulation with 1000 walkers in the unit square for 10, 100, and 500 steps
np.random.seed(42)
n_walkers = 1000
rand_pos = np.random.rand(n_walkers, 2)
step_size = 0.05

plt.figure(figsize=(18, 6))
for i, steps in enumerate([10, 100, 500]):
    plt.subplot(1, 3, i+1)
    plt.scatter(rand_pos[:,0], rand_pos[:,1], label='Start', color='b')
    for j in range(n_walkers):
        walker = Walker(ndim=2, step_size=step_size)
        walker.pos = rand_pos[j]
        trajectory = walker.doSteps(steps)
        plt.scatter(trajectory[-1, 0], trajectory[-1, 1], color='r', alpha=0.5)
    plt.title(f'Position of Walkers after {steps} Steps')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.legend(['Start', 'End'])
plt.tight_layout()
plt.show()