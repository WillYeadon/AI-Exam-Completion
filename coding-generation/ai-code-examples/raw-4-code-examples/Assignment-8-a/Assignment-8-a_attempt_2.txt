import numpy as np
import matplotlib.pyplot as plt

class Walker:
    def __init__(self, ndim=1, step_size=1):
        self.ndim = ndim
        self.step_size = step_size
        self.pos = np.zeros(ndim)
        self.possibleSteps = [step_size * np.identity(ndim)[i] for i in range(ndim)] + [-step_size * np.identity(ndim)[i] for i in range(ndim)]
    
    def pickStep(self):
        return self.possibleSteps[np.random.randint(0, len(self.possibleSteps))]
    
    def doSteps(self, n):
        trajectory = np.zeros((n + 1, self.ndim))
        for i in range(1, n + 1):
            step = self.pickStep()
            self.pos += step
            trajectory[i] = self.pos
        return trajectory


# Parameters
num_walkers = 100
num_steps = 1000

# Arrays to store the positions for all walkers
all_positions = np.zeros((num_walkers, num_steps + 1))
all_sq_positions = np.zeros((num_walkers, num_steps + 1))

# Simulate all walkers
for i in range(num_walkers):
    walker = Walker(ndim=1)
    trajectory = walker.doSteps(num_steps)
    all_positions[i] = trajectory[:, 0]  # Since it is 1D, we just use the first dimension
    all_sq_positions[i] = trajectory[:, 0]**2

# Calculate average position and average squared position
average_position = np.mean(all_positions, axis=0)
average_sq_position = np.mean(all_sq_positions, axis=0)

# Plotting
plt.figure(figsize=(12, 6))

plt.plot(average_position, label="Average Position")
plt.plot(average_sq_position, label="Average Squared Position")

plt.title("Average Position and Average Squared Position of 100 1D Walkers (1000 Steps)")
plt.xlabel("Step #")
plt.ylabel("Position")
plt.legend()
plt.grid(True)
plt.show()