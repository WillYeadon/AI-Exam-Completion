import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

# Define Rosenbrock's Banana Function
def banana(r):
    x, y = r
    return (1 - x)**2 + 100*(y - x**2)**2

# Define the gradient of Rosenbrock's Banana Function
def banana_grad(r):
    x, y = r
    grad_x = -2*(1 - x) - 400*x*(y - x**2)
    grad_y = 200*(y - x**2)
    return np.array([grad_x, grad_y])

# Gradient Descent optimization function
def gradientDescent(df, r0, eta, n_steps):
    trajectory = []
    r = r0
    for _ in range(n_steps):
        trajectory.append(r)
        gradient = df(r)
        r = r - eta * gradient
    return np.array(trajectory)

# Initialize parameters for the banana function plot
x = np.linspace(-2, 2, 100)
y = np.linspace(-1, 3, 100)
X, Y = np.meshgrid(x, y)
Z = banana((X, Y))

etas = [0.001, 0.002, 0.003]  # Different step sizes for gradient descent

plt.figure()
im = plt.imshow(Z, extent=(-2, 2, -1, 3), origin='lower', cmap=cm.gray, alpha=0.9)

r0 = np.array([0.2, 1])

for eta in etas:
    trajectory = gradientDescent(banana_grad, r0, eta, 1000)
    plt.plot(trajectory[:,0], trajectory[:,1], label=f'Eta = {eta}')

plt.title("Gradient Descent Trajectories for Rosenbrock's Banana Function")
plt.xlabel("x")
plt.ylabel("y")
plt.legend()
plt.colorbar(im)
plt.show()