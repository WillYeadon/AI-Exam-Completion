import numpy as np
import matplotlib.pyplot as plt

# Define the Rosenbrock Banana function and its gradient
def banana(r):
    x, y = r
    return (1 - x)**2 + 100 * (y - x**2)**2

def banana_grad(r):
    x, y = r
    df_dx = -2 * (1 - x) - 400 * x * (y - x**2)
    df_dy = 200 * (y - x**2)
    return np.array([df_dx, df_dy])

# Initialize parameters for the banana function plot
x = np.linspace(-2, 2, 100)
y = np.linspace(-1, 3, 100)
X, Y = np.meshgrid(x, y)
# Placeholder for data
data = np.zeros_like(X)

# Implement the banana function on data
for i in range(X.shape[0]):
    for j in range(X.shape[1]):
        data[i, j] = banana([X[i, j], Y[i, j]])

# Plot starter code
plt.figure(figsize=(12, 8))
plt.contour(X, Y, data, levels=np.logspace(-1, 3, 20), cmap='jet')

# Define the gradient descent function
def gradient_descent(start, eta, tol=1e-6, max_iter=10000):
    path = [start]
    r = start
    for _ in range(max_iter):
        grad = banana_grad(r)
        r = r - eta * grad
        path.append(r)
        if np.linalg.norm(grad) < tol:
            break
    return np.array(path)

# Experiment with different step sizes
etas = [0.001, 0.01, 0.1]
start = np.array([0.2, 1])

# Plot the GD trajectories with different etas
colors = ['r', 'g', 'b']
labels = [f'eta = {eta}' for eta in etas]

for eta, color, label in zip(etas, colors, labels):
    path = gradient_descent(start, eta)
    plt.plot(path[:, 0], path[:, 1], color, label=label)

# Add labels, a title, and a legend to the plot
plt.title("Gradient Descent on Rosenbrock's Banana Function")
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.show()