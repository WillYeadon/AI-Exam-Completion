import numpy as np
import matplotlib.pyplot as plt

# Constants
TAU = 5.0

# Function to calculate mean lifetime from half life
def mean_lifetime(half_life):
    return half_life / np.log(2)

# Function to describe the radioactive decay process
def f_rad(N, t):
    return -N / TAU

# Analytical solution for radioactive decay
def analytic(N0, t):
    return N0 * np.exp(-t / TAU)

# Euler's method
def solve_euler(n0, t0, dt, n_steps):
    N = np.zeros(n_steps+1)
    N[0] = n0
    t = t0
    for i in range(1, n_steps+1):
        N[i] = N[i-1] + f_rad(N[i-1], t) * dt
        t += dt
    return N

# Fourth Order Runge-Kutta method
def solve_RK4(n0, t0, dt, n_steps):
    N = np.zeros(n_steps+1)
    N[0] = n0
    t = t0
    for i in range(1, n_steps+1):
        k1 = f_rad(N[i-1], t)
        k2 = f_rad(N[i-1] + 0.5*k1*dt, t + 0.5*dt)
        k3 = f_rad(N[i-1] + 0.5*k2*dt, t + 0.5*dt)
        k4 = f_rad(N[i-1] + k3*dt, t + dt)
        
        N[i] = N[i-1] + (k1 + 2*k2 + 2*k3 + k4) * dt / 6
        t += dt
    return N

# Plot to show the error scaling between Euler and RK4 methods
n0 = 1000
t0 = 0
dt = 1
n_steps = 100
time_array = np.linspace(t0, n_steps, num=n_steps+1)

euler_solution = solve_euler(n0, t0, dt, n_steps)
RK4_solution = solve_RK4(n0, t0, dt, n_steps)
exact_solution = analytic(n0, time_array)

plt.figure(figsize=(12, 6))
plt.plot(time_array, exact_solution, label='Exact Solution', linestyle='--')
plt.plot(time_array, euler_solution, label='Euler Method')
plt.plot(time_array, RK4_solution, label='RK4 Method')
plt.xlabel('Time')
plt.ylabel('Number of Nuclei')
plt.legend()
plt.show()