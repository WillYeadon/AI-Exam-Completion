import numpy as np
import matplotlib.pyplot as plt

# Constants
rho = 7850  # kg/m^3 (density of iron)
r = 0.2  # m (radius of the cannonball)
g = 9.81  # m/s^2 (acceleration due to gravity)
v0 = 125  # m/s (initial velocity)

# Function to calculate cross-sectional area of a sphere
def sphere_area(radius):
    return np.pi * radius**2

# Function to calculate the mass of an iron sphere
def sphere_mass(radius, density):
    return (4/3) * np.pi * radius**3 * density

# Calculating area and mass of the cannonball
A = sphere_area(r)
m = sphere_mass(r, rho)

# Function to model cannonball's motion
def projectile_motion(t, u):
    du = np.zeros(4)
    du[0] = u[1]
    du[1] = -((0.5 * 0.01 * u[1]**2 * A) / m) / (1 + (0.1 * u[1]**2))
    du[2] = u[3]
    du[3] = -g - ((0.5 * 0.01 * u[3]**2 * A) / m) / (1 + (0.1 * u[3]**2))
    return du

# Euler's method for solving the ODE
def solve_ode(f, t_span, u0, dt):
    t_values = np.arange(t_span[0], t_span[1] + dt, dt)
    u_values = np.zeros((len(t_values), len(u0)))
    u_values[0] = u0

    for i in range(1, len(t_values)):
        du = f(t_values[i-1], u_values[i-1])
        u_values[i] = u_values[i-1] + du * dt

    return t_values, u_values

# Function to find the x-coordinate where the trajectory crosses y=0
def find_range(u_values):
    idx = np.where(u_values[:, 2] <= 0)[0][0]
    x_range = u_values[idx, 0]
    return x_range

# Function to find the range of the projectile
def calculate_range(angle):
    theta = np.radians(angle)
    u0 = np.array([0, v0*np.cos(theta), 0, v0*np.sin(theta)])  # initial conditions
    t_span = [0, 30]  # time span for simulation
    dt = 0.001

    t_values, u_values = solve_ode(projectile_motion, t_span, u0, dt)
    range_val = find_range(u_values)
    return range_val

# Visualization
angles = np.linspace(1, 89, 10)  # angles from 1 to 89 degrees
colors = plt.cm.viridis(np.linspace(0, 1, len(angles)))

plt.figure(figsize=(10, 6))
plt.title('Trajectories of Cannonball for Different Initial Angles')
plt.xlabel('Distance (m)')
plt.ylabel('Height (m)')

for angle, color in zip(angles, colors):
    range_val = calculate_range(angle)
    theta = np.radians(angle)
    u0 = np.array([0, v0*np.cos(theta), 0, v0*np.sin(theta)])
    t_span = [0, 2*range_val/v0]  # adjust time span based on range
    dt = 0.001

    t_values, u_values = solve_ode(projectile_motion, t_span, u0, dt)
    plt.plot(u_values[:, 0], u_values[:, 2], label=f'{angle} degrees', color=color)

plt.legend()
plt.grid(True)
plt.show()